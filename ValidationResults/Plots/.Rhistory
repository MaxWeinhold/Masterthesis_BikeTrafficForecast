ProjectionData$ADFC_Index2 = ProjectionData$ADFC_Index^2
ProjectionData$UniBuild500mmRadius2 = ProjectionData$UniBuild500mmRadius^2
ProjectionData$ClothesShop500mmRadius2 = ProjectionData$ClothesShop500mmRadius^2
ProjectionData$ClosestTrainS2 = ProjectionData$ClosestTrainS^2
ProjectionData$ClosestBridge2 = ProjectionData$ClosestBridge^2
ProjectionData$young302 = ProjectionData$young30^2
ProjectionData$PKWs2 = ProjectionData$PKWs^2
ProjectionData$Rain3 = ProjectionData$Rain^3
ProjectionData$Inhabitants3 = ProjectionData$Inhabitants^3
ProjectionData$UniBuild500mmRadius3 = ProjectionData$UniBuild500mmRadius^3
ProjectionData$ClothesShop500mmRadius3 = ProjectionData$ClothesShop500mmRadius^3
ProjectionData$ClosestTrainS3 = ProjectionData$ClosestTrainS^3
ProjectionData$ClosestBridge3 = ProjectionData$ClosestBridge3
ProjectionData$SignalsRatio = ProjectionData$UnmCross250mmRadius/(ProjectionData$UnmCross250mmRadius + ProjectionData$Signals250mmRadius + 1)
summary(ProjectionData)
names(ProjectionData)
summary(ProjectionData$Area)
ProjectionData$Area=755.2
ProjectionData$Inhabitants= 1841000
ProjectionData$Male_Ratio= 0.5
ProjectionData$Area=NULL
ProjectionData$Inhabitants= NULL
ProjectionData$Male_Ratio= NULL
#calculate Values --------------------------------------------------------------
setwd("D:/STUDIUM/Münster/7. Semester")
load("Modell3_RF.rdata")
summary(model)
library(randomForest)
#projection_pred <- model %>% predict(ProjectionData, type='response')
projection_pred <- predict(model, newdata = ProjectionData, type='response')
summary(as.numeric(projection_pred))
summary(exp(as.numeric(projection_pred)))
ProjectionData$Value = exp(as.numeric(projection_pred))
summary(ProjectionData$Value)
nrow(ProjectionData)
#Create Map
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=15)
lower = mean(ProjectionData$Value)/2
mid = mean(ProjectionData$Value)
higher = mean(ProjectionData$Value) + mean(ProjectionData$Value)/2
#write.csv(ProjectionData,"Hamburg_Innenstadt.csv")
for(i in 1:nlevels(as.factor(ProjectionData$Months))){
for(j in 1:nlevels(as.factor(ProjectionData$Day))){
for(k in 1:nlevels(as.factor(ProjectionData$Hour))){
streetPositions = ProjectionData[ProjectionData$Months==levels(as.factor(ProjectionData$Months))[i],]
streetPositions = streetPositions[streetPositions$Day==levels(as.factor(ProjectionData$Day))[j],]
streetPositions = streetPositions[streetPositions$Hour==levels(as.factor(ProjectionData$Hour))[k],]
nrow(streetPositions)
map_plot = ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.8, alpha = 1.5, lineend = "round") +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/ValidationResults/Plots")
png(file=paste("map",ProjectionData$Town[1],"plot_RF_Innenstadt_",i,"_",j,"_",k,".png",sep=""),width=1200, height=1200)
print(map_plot)
dev.off()
#summary(streetPositions)
}
}
}
beep("mario")
#Test für dopar
#Test = as.data.frame(foreach (i = 1:10, .combine=rbind)%dopar%{
#  c(Year = 2000 + i,Value = rnorm(1)/3 + i/2)
#})
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.8, alpha = 1.5, lineend = "round") +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
setwd("D:/STUDIUM/Münster/7. Semester/Masterarbeit Daten/Einwohner_Destatis")
Destatis12 = read.csv(file = "31122012_Auszug_GV.csv",sep=";")
Destatis13 = read.csv(file = "31122013_Auszug_GV.csv",sep=";")
Destatis14 = read.csv(file = "31122014_Auszug_GV.csv",sep=";")
Destatis15 = read.csv(file = "31122015_Auszug_GV.csv",sep=";")
Destatis16 = read.csv(file = "31122016_Auszug_GV.csv",sep=";")
Destatis17 = read.csv(file = "31122017_Auszug_GV.csv",sep=";")
Destatis18 = read.csv(file = "31122018_Auszug_GV.csv",sep=";")
Destatis19 = read.csv(file = "31122019_Auszug_GV.csv",sep=";")
Destatis20 = read.csv(file = "31122020_Auszug_GV.csv",sep=";")
Destatis21 = read.csv(file = "31122021_Auszug_GV.csv",sep=";")
title=", Universitätsstadt" #This differs, there are cities and also hanseatic cities
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
test12[17] <- NULL
test12[17] <- NULL
test12 <- test12 %>% mutate_all(na_if,"")
names(test12)[1]="number"
test12=na.omit(test12)
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
paste(Town,title,sep="")
Year = 2023
Town = "Mannheim"
#Ad the different Variables-----------------------------------------------------
Bundesland = "BWB"
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
paste(Town,title,sep=""
paste(Town,title,sep="")
paste(Town,title,sep="")
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
test12[17] <- NULL
test12[17] <- NULL
test12 <- test12 %>% mutate_all(na_if,"")
names(test12)[1]="number"
test12=na.omit(test12)
test12$Year=2012
test12
summary(ProjectionData)
test13=as.data.frame(Destatis13[Destatis13$X.6 == paste(Town,title,sep=""),])
test13[17] <- NULL
test13[17] <- NULL
test13 <- test13 %>% mutate_all(na_if,"")
names(test13)[1]="number"
test13=na.omit(test13)
test13$Year=2013
test14=as.data.frame(Destatis14[Destatis14$X.6 == paste(Town,title,sep=""),])
test14[17] <- NULL
test14[17] <- NULL
test14 <- test14 %>% mutate_all(na_if,"")
names(test14)[1]="number"
test14=na.omit(test14)
test14$Year=2014
test15=as.data.frame(Destatis15[Destatis15$X.6 == paste(Town,title,sep=""),])
test15[17] <- NULL
test15[17] <- NULL
test15 <- test15 %>% mutate_all(na_if,"")
names(test15)[1]="number"
test15=na.omit(test15)
test15$Year=2015
test16=as.data.frame(Destatis16[Destatis16$X.6 == paste(Town,title,sep=""),])
test16[17] <- NULL
test16[17] <- NULL
test16 <- test16 %>% mutate_all(na_if,"")
names(test16)[1]="number"
test16=na.omit(test16)
test16$Year=2016
test17=as.data.frame(Destatis17[Destatis17$X.6 == paste(Town,title,sep=""),])
test17[17] <- NULL
test17[17] <- NULL
test17 <- test17 %>% mutate_all(na_if,"")
names(test17)[1]="number"
test17=na.omit(test17)
test17$Year=2017
test18=as.data.frame(Destatis18[Destatis18$X.6 == paste(Town,title,sep=""),])
test18[17] <- NULL
test18[17] <- NULL
test18 <- test18 %>% mutate_all(na_if,"")
names(test18)[1]="number"
test18=na.omit(test18)
test18$Year=2018
test19=as.data.frame(Destatis19[Destatis19$X.6 == paste(Town,title,sep=""),])
test19[17] <- NULL
test19[17] <- NULL
test19 <- test19 %>% mutate_all(na_if,"")
names(test19)[1]="number"
test19=na.omit(test19)
test19$Year=2019
test20=as.data.frame(Destatis20[Destatis20$X.6 == paste(Town,title,sep=""),])
test20[17] <- NULL
test20[17] <- NULL
test20 <- test20 %>% mutate_all(na_if,"")
names(test20)[1]="number"
test20=na.omit(test20)
test20$Year=2020
test21=as.data.frame(Destatis21[Destatis21$X.6 == paste(Town,title,sep=""),])
test21[17] <- NULL
test21[17] <- NULL
test21 <- test21 %>% mutate_all(na_if,"")
names(test21)[1]="number"
test21=na.omit(test21)
test21$Year=2021
test=rbind(test12,test13)
test=rbind(test,test14)
test=rbind(test,test15)
test=rbind(test,test16)
test=rbind(test,test17)
test=rbind(test,test18)
test=rbind(test,test19)
test=rbind(test,test20)
test$X.7 = gsub(" ", "", test$X.7)
test$X.7 = gsub(",", ".", test$X.7)
test$X.7 = as.numeric(test$X.7)
names(test)[9]="Area"
test$X.8 = gsub(" ", "", test$X.8)
test$X.8 = as.numeric(test$X.8)
names(test)[10]="Inhabitants"
test$X.9 = gsub(" ", "", test$X.9)
test$X.9 = as.numeric(test$X.9) / test$Inhabitants
names(test)[11]="Male_Ratio"
test$X.13 = gsub(" ", "", test$X.13)
test$X.13 = gsub(",", ".", test$X.13)
test$X.13 = as.numeric(test$X.13)
names(test)[15]="City_Lon"
test$X.14 = gsub(" ", "", test$X.14)
test$X.14 = gsub(",", ".", test$X.14)
test$X.14 = as.numeric(test$X.14)
names(test)[16]="City_Lat"
names(test)[18]="Density"
test$number <- NULL
test$X <- NULL
test$X.1 <- NULL
test$X.2 <- NULL
test$X.3 <- NULL
test$X.4 <- NULL
test$X.5 <- NULL
test$X.6 <- NULL
test$X.10 <- NULL
test$X.11 <- NULL
test$X.12 <- NULL
test$X.17 <- NULL
test
if(Year %in% levels(as.factor(test$Year))){
test = test[(test$Year==Year),]
}else {
p = as.data.frame(c(2012:2030))
names(p)[1]="Year"
p$Year2 = p$Year^2
p$Year3 = p$Year^3
model1 <- lm(log(Inhabitants) ~ Year, data=test)
predict1 <- as.data.frame(predict(model1,p))
predict1$Year = p$Year
names(predict1)[1]="Inhabitants"
predict1$Inhabitants = exp(predict1$Inhabitants)
model2 <- lm(log(Male_Ratio) ~ Year, data=test)
predict2 <- as.data.frame(predict(model2,p))
predict2$Year = p$Year
names(predict2)[1]="Male_Ratio "
predict2$Male_Ratio  = exp(predict2$Male_Ratio )
plot1 = ggplot(data = test,aes(x = Year, y = Inhabitants)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Einwohneranzahl") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict1, aes(x = Year, y = Inhabitants),color = "red", size = 1.5)
plot2 = ggplot(data = test,aes(x = Year, y = Male_Ratio)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Geschlechterverhältnis") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict2, aes(x = Year, y = Male_Ratio),color = "red", size = 1.5)
test[nrow(test) + 1,] = c(test$Area[10],predict1[predict1$Year == Year, ]$Inhabitants,predict2[predict1$Year == Year, ]$Male_Ratio,test$City_Lon[10],test$City_Lat[10],"dicht besiedelt",Year)
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/thesis_german/Plots")
png(file=paste("Predictions_",Town,"_plot01.png",sep=""),width=800, height=800)
print(plot1)
dev.off()
png(file=paste("Predictions_",Town,"_plot02.png",sep=""),width=800, height=800)
print(plot2)
dev.off()
}
test
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
test12[17] <- NULL
test12[17] <- NULL
test12 <- test12 %>% mutate_all(na_if,"")
names(test12)[1]="number"
test12=na.omit(test12)
test12$Year=2012
setwd("D:/STUDIUM/Münster/7. Semester/Masterarbeit Daten/Einwohner_Destatis")
Destatis12 = read.csv(file = "31122012_Auszug_GV.csv",sep=";")
Destatis13 = read.csv(file = "31122013_Auszug_GV.csv",sep=";")
Destatis14 = read.csv(file = "31122014_Auszug_GV.csv",sep=";")
Destatis15 = read.csv(file = "31122015_Auszug_GV.csv",sep=";")
Destatis16 = read.csv(file = "31122016_Auszug_GV.csv",sep=";")
Destatis17 = read.csv(file = "31122017_Auszug_GV.csv",sep=";")
Destatis18 = read.csv(file = "31122018_Auszug_GV.csv",sep=";")
Destatis19 = read.csv(file = "31122019_Auszug_GV.csv",sep=";")
Destatis20 = read.csv(file = "31122020_Auszug_GV.csv",sep=";")
Destatis21 = read.csv(file = "31122021_Auszug_GV.csv",sep=";")
title=", Universitätsstadt" #This differs, there are cities and also hanseatic cities
test12=as.data.frame(Destatis12[Destatis12$X.6 == paste(Town,title,sep=""),])
test12[17] <- NULL
test12[17] <- NULL
test12 <- test12 %>% mutate_all(na_if,"")
names(test12)[1]="number"
test12=na.omit(test12)
test12$Year=2012
test13=as.data.frame(Destatis13[Destatis13$X.6 == paste(Town,title,sep=""),])
test13[17] <- NULL
test13[17] <- NULL
test13 <- test13 %>% mutate_all(na_if,"")
names(test13)[1]="number"
test13=na.omit(test13)
test13$Year=2013
test14=as.data.frame(Destatis14[Destatis14$X.6 == paste(Town,title,sep=""),])
test14[17] <- NULL
test14[17] <- NULL
test14 <- test14 %>% mutate_all(na_if,"")
names(test14)[1]="number"
test14=na.omit(test14)
test14$Year=2014
test15=as.data.frame(Destatis15[Destatis15$X.6 == paste(Town,title,sep=""),])
test15[17] <- NULL
test15[17] <- NULL
test15 <- test15 %>% mutate_all(na_if,"")
names(test15)[1]="number"
test15=na.omit(test15)
test15$Year=2015
test16=as.data.frame(Destatis16[Destatis16$X.6 == paste(Town,title,sep=""),])
test16[17] <- NULL
test16[17] <- NULL
test16 <- test16 %>% mutate_all(na_if,"")
names(test16)[1]="number"
test16=na.omit(test16)
test16$Year=2016
test17=as.data.frame(Destatis17[Destatis17$X.6 == paste(Town,title,sep=""),])
test17[17] <- NULL
test17[17] <- NULL
test17 <- test17 %>% mutate_all(na_if,"")
names(test17)[1]="number"
test17=na.omit(test17)
test17$Year=2017
test18=as.data.frame(Destatis18[Destatis18$X.6 == paste(Town,title,sep=""),])
test18[17] <- NULL
test18[17] <- NULL
test18 <- test18 %>% mutate_all(na_if,"")
names(test18)[1]="number"
test18=na.omit(test18)
test18$Year=2018
test19=as.data.frame(Destatis19[Destatis19$X.6 == paste(Town,title,sep=""),])
test19[17] <- NULL
test19[17] <- NULL
test19 <- test19 %>% mutate_all(na_if,"")
names(test19)[1]="number"
test19=na.omit(test19)
test19$Year=2019
test20=as.data.frame(Destatis20[Destatis20$X.6 == paste(Town,title,sep=""),])
test20[17] <- NULL
test20[17] <- NULL
test20 <- test20 %>% mutate_all(na_if,"")
names(test20)[1]="number"
test20=na.omit(test20)
test20$Year=2020
test21=as.data.frame(Destatis21[Destatis21$X.6 == paste(Town,title,sep=""),])
test21[17] <- NULL
test21[17] <- NULL
test21 <- test21 %>% mutate_all(na_if,"")
names(test21)[1]="number"
test21=na.omit(test21)
test21$Year=2021
test=rbind(test12,test13)
test=rbind(test,test14)
test=rbind(test,test15)
test=rbind(test,test16)
test=rbind(test,test17)
test=rbind(test,test18)
test=rbind(test,test19)
test=rbind(test,test20)
test=rbind(test,test21)
test$X.7 = gsub(" ", "", test$X.7)
test$X.7 = gsub(",", ".", test$X.7)
test$X.7 = as.numeric(test$X.7)
names(test)[9]="Area"
test$X.8 = gsub(" ", "", test$X.8)
test$X.8 = as.numeric(test$X.8)
names(test)[10]="Inhabitants"
test$X.9 = gsub(" ", "", test$X.9)
test$X.9 = as.numeric(test$X.9) / test$Inhabitants
names(test)[11]="Male_Ratio"
#City Longitude and Latidtude
test$X.13 = gsub(" ", "", test$X.13)
test$X.13 = gsub(",", ".", test$X.13)
test$X.13 = as.numeric(test$X.13)
names(test)[15]="City_Lon"
test$X.14 = gsub(" ", "", test$X.14)
test$X.14 = gsub(",", ".", test$X.14)
test$X.14 = as.numeric(test$X.14)
names(test)[16]="City_Lat"
names(test)[18]="Density"
test$number <- NULL
test$X <- NULL
test$X.1 <- NULL
test$X.2 <- NULL
test$X.3 <- NULL
test$X.4 <- NULL
test$X.5 <- NULL
test$X.6 <- NULL
test$X.10 <- NULL
test$X.11 <- NULL
test$X.12 <- NULL
test$X.17 <- NULL
if(Year %in% levels(as.factor(test$Year))){
test = test[(test$Year==Year),]
}else {
p = as.data.frame(c(2012:2030))
names(p)[1]="Year"
p$Year2 = p$Year^2
p$Year3 = p$Year^3
model1 <- lm(log(Inhabitants) ~ Year, data=test)
predict1 <- as.data.frame(predict(model1,p))
predict1$Year = p$Year
names(predict1)[1]="Inhabitants"
predict1$Inhabitants = exp(predict1$Inhabitants)
model2 <- lm(log(Male_Ratio) ~ Year, data=test)
predict2 <- as.data.frame(predict(model2,p))
predict2$Year = p$Year
names(predict2)[1]="Male_Ratio "
predict2$Male_Ratio  = exp(predict2$Male_Ratio )
plot1 = ggplot(data = test,aes(x = Year, y = Inhabitants)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Einwohneranzahl") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict1, aes(x = Year, y = Inhabitants),color = "red", size = 1.5)
plot2 = ggplot(data = test,aes(x = Year, y = Male_Ratio)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Geschlechterverhältnis") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict2, aes(x = Year, y = Male_Ratio),color = "red", size = 1.5)
test[nrow(test) + 1,] = c(test$Area[10],predict1[predict1$Year == Year, ]$Inhabitants,predict2[predict1$Year == Year, ]$Male_Ratio,test$City_Lon[10],test$City_Lat[10],"dicht besiedelt",Year)
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/thesis_german/Plots")
png(file=paste("Predictions_",Town,"_plot01.png",sep=""),width=800, height=800)
print(plot1)
dev.off()
png(file=paste("Predictions_",Town,"_plot02.png",sep=""),width=800, height=800)
print(plot2)
dev.off()
}
test
ProjectionData = merge(x = ProjectionData,y = test,
by = c("Year"),
all = FALSE)
ProjectionData$Area = as.numeric(ProjectionData$Area)
ProjectionData$Inhabitants = as.numeric(ProjectionData$Inhabitants)
ProjectionData$Male_Ratio = as.numeric(ProjectionData$Male_Ratio)
ProjectionData$City_Lon = as.numeric(ProjectionData$City_Lon)
ProjectionData$City_Lat = as.numeric(ProjectionData$City_Lat)
summary(ProjectionData)
#calculate Values --------------------------------------------------------------
setwd("D:/STUDIUM/Münster/7. Semester")
load("Modell3_RF.rdata")
summary(model)
library(randomForest)
#projection_pred <- model %>% predict(ProjectionData, type='response')
projection_pred <- predict(model, newdata = ProjectionData, type='response')
summary(as.numeric(projection_pred))
summary(exp(as.numeric(projection_pred)))
ProjectionData$Value = exp(as.numeric(projection_pred))
summary(ProjectionData$Value)
nrow(ProjectionData)
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=15)
lower = mean(ProjectionData$Value)/2
mid = mean(ProjectionData$Value)
higher = mean(ProjectionData$Value) + mean(ProjectionData$Value)/2
for(i in 1:nlevels(as.factor(ProjectionData$Months))){
for(j in 1:nlevels(as.factor(ProjectionData$Day))){
for(k in 1:nlevels(as.factor(ProjectionData$Hour))){
streetPositions = ProjectionData[ProjectionData$Months==levels(as.factor(ProjectionData$Months))[i],]
streetPositions = streetPositions[streetPositions$Day==levels(as.factor(ProjectionData$Day))[j],]
streetPositions = streetPositions[streetPositions$Hour==levels(as.factor(ProjectionData$Hour))[k],]
nrow(streetPositions)
map_plot = ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.8, alpha = 1.5, lineend = "round") +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/ValidationResults/Plots")
png(file=paste("map",ProjectionData$Town[1],"plot_RF_Innenstadt_",i,"_",j,"_",k,".png",sep=""),width=1200, height=1200)
print(map_plot)
dev.off()
#summary(streetPositions)
}
}
}
beep("mario")
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.8, alpha = 1.5, lineend = "round") +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=14)
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=15)
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.8, alpha = 1.5, lineend = "round") +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
write.csv(ProjectionData,"Mannheim_Innenstadt_Oststadt.csv")
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=15)
