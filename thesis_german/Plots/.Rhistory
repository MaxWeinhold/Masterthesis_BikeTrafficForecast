#The sf we will need to make geometrical calculations.
if(!require("sf")) install.packages("sf")
library(sf)
#Further we need to access tidyverse.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
city="Berlin"
Brandenburg_Gate=c(13.377336846520663,52.516264818429924)
#As second we build a query asking for traffic signals in Berlin.
q <- getbb(city) %>%
opq() %>%
add_osm_feature("highway", "traffic_signals")
#Read the osm data format as a list in R.
signals <- osmdata_sf(q)
#If you access signals:
signals
distances=c(1:length(signals$osm_points$osm_id))
for(i in 1:length(distances)){
distances[i]=distm(Brandenburg_Gate, c(signals$osm_points$geometry[[i]][1],signals$osm_points$geometry[[i]][2]), fun=distGeo)
}
#This is a script for a tutorial
#You can learn to get the coordinates of points of interested by collecting data via open street map.
#For that purpose we will use the osmdata package.
if(!require("osmdata")) install.packages("osmdata")
library(osmdata)
#Do not forget to give credit to the creators.
citation ("osmdata")
#The sf we will need to make geometrical calculations.
if(!require("sf")) install.packages("sf")
library(sf)
#Further we need to access tidyverse.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if(!require("geosphere")) install.packages("geosphere")
library(geosphere)#package for calculating distance using longitude and latitude
citation ("osmdata")
#The sf we will need to make geometrical calculations.
if(!require("sf")) install.packages("sf")
library(sf)
#Further we need to access tidyverse.
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if(!require("geosphere")) install.packages("geosphere")
library(geosphere)#package for calculating distance using longitude and latitude
#First we determine which city we want to study.
city="Berlin"
#Or you use another data source.
Brandenburg_Gate=c(13.377336846520663,52.516264818429924)
q <- getbb(city) %>%
opq() %>%
add_osm_feature("highway", "traffic_signals")
signals <- osmdata_sf(q)
signals
signals$osm_points$geometry
distances=c(1:length(signals$osm_points$osm_id))
for(i in 1:length(distances)){
distances[i]=distm(Brandenburg_Gate, c(signals$osm_points$geometry[[i]][1],signals$osm_points$geometry[[i]][2]), fun=distGeo)
}
min(distances)
sum(distances < 1000)
q2 <- getbb(city) %>%
opq() %>%
add_osm_feature("highway", "primary")
primary <- osmdata_sf(q2)
#Since now we are handeling street, we are not longer interested in osm_points but osm_lines
Lines_primary = st_transform(primary$osm_lines$geometry,4269)
#We need to convert our point at Brandenburg Gate to another data format
POINT_Brandenburg_Gate = as.data.frame(rbind(Brandenburg_Gate))
names(POINT_Brandenburg_Gate)[1]="long1"
names(POINT_Brandenburg_Gate)[2]="lat1"
POINT_Brandenburg_Gate = st_as_sf(POINT_Brandenburg_Gate, coords = c("long1","lat1"))
POINT_Brandenburg_Gate <- st_set_crs(POINT_Brandenburg_Gate, 4269)
#now we can use the st_distance() function to calculate each distance from our Point to each line in our primary street network.
#The smallest distance is:
min(st_distance(POINT_Brandenburg_Gate$geometry, Lines_primary))
library(lubridate)
library(dplyr)
library(geosphere)#package for calculating distance using longitude and latitude
#Clean up memory
rm(list=ls())
#Source storage location (outside the GitHub Repository)
#Because of file size limitation
#files about 100 MB have to be excluded
#D:\STUDIUM\MÃ¼nster\7. Semester\Masterarbeit Daten\Bochum
setwd("D:/STUDIUM/MÃ¼nster/7. Semester/Masterarbeit Daten/Darmstadt")
#Clean up memory
rm(list=ls())
#Spatial prediction of urban bicycle traffic volume with machine learning
#Maximilian Weinhold
#------------------------------------------------------------------------
#Data preperation: Data Set Visualization2
#Clean up memory
rm(list=ls())
library(tidyverse)
library(scales)
library(dplyr)
library(plyr)
library(lubridate)
#Source storage location (outside the GitHub Repository)
#Because of file size limitation
#files about 100 MB have to be excluded
setwd("D:/STUDIUM/Münster/7. Semester/Masterarbeit Daten")
#Load Data Set
BikeData = read.csv(file = "completeDataSet_2.csv",sep=",", encoding="ISO-8859-1")
levels(as.factor(BikeData$Town))
nlevels(as.factor(BikeData$Station))
levels(as.factor(BikeData$Station))
levels(as.factor(BikeData$Year))
nrow(BikeData)
names(BikeData)
nrow(BikeData)
#Create average Variables per city
citties = as.data.frame(matrix(1:18*nlevels(as.factor(BikeData$Town)), nrow = nlevels(as.factor(BikeData$Town)), ncol = 18))
names(citties)[1]="Town"
names(citties)[2]="Value_Mean"
names(citties)[3]="Value_Median"
names(citties)[4]="Value_Min"
names(citties)[5]="Value_Max"
names(citties)[6]="Inhabitants_Mean"
names(citties)[7]="MaleRatio_Mean"
names(citties)[8]="young18_Mean"
names(citties)[9]="young25_Mean"
names(citties)[10]="young30_Mean"
names(citties)[11]="older40_Mean"
names(citties)[12]="older60_Mean"
names(citties)[13]="Temperature_Mean"
names(citties)[14]="Rain_Mean"
names(citties)[15]="Size"
names(citties)[16]="ADFC_Mean"
names(citties)[17]="PKWs_Mean"
names(citties)[18]="Immigrants_Mean"
citties$Town=levels(as.factor(BikeData$Town))
for(i in 1:nlevels(as.factor(BikeData$Town))){
d=BikeData[BikeData$Town %in% citties$Town[i],]
citties$Value_Mean[i]=mean(d$Value)
citties$Value_Median[i]=median(d$Value)
citties$Value_Max[i]=max(d$Value)
citties$Value_Min[i]=min(d$Value)
citties$Inhabitants_Mean[i]=mean(d$Inhabitants)
citties$MaleRatio_Mean[i]=mean(d$Male_Ratio)
citties$young18_Mean[i]=mean(d$young18)
citties$young25_Mean[i]=mean(d$young25)
citties$young30_Mean[i]=mean(d$young30)
citties$older40_Mean[i]=mean(d$older40)
citties$older60_Mean[i]=mean(d$older60)
citties$Temperature_Mean[i]=mean(d$Temperature)
citties$Rain_Mean[i]=mean(d$Rain)
citties$Size[i]=mean(d$Area)
citties$ADFC_Mean[i]=mean(d$ADFC_Index)
citties$PKWs_Mean[i]=mean(d$PKWs)
citties$Immigrants_Mean[i]=mean(d$Immigrants)
}
if(!require("ggrepel")) install.packages("ggrepel")
library(ggrepel)
plot1 = ggplot(data=citties)+
geom_point(aes(x=Inhabitants_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=Inhabitants_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = Inhabitants_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Einwohnergröße") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot1
plot2 = ggplot(data=citties)+
geom_point(aes(x=MaleRatio_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=MaleRatio_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = MaleRatio_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Anteil männl. Bevölker") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot2
plot3 = ggplot(data=citties)+
geom_point(aes(x=young30_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=young30_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = young30_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Anteil der Bevölker unter 30 Jahre") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot3
plot(citties$Size,citties$Value_Mean)
plot4 = ggplot(data=citties)+
geom_point(aes(x=Inhabitants_Mean/Size, y=Value_Mean), size = 2) +
geom_smooth(aes(x=Inhabitants_Mean/Size, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = Inhabitants_Mean/Size, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Einwohner je km²") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot4
plot5 = ggplot(data=citties)+
geom_point(aes(x=ADFC_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=ADFC_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = ADFC_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "ADFC Fahrradklima Index") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot5
plot6 = ggplot(data=citties)+
geom_point(aes(x=PKWs_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=PKWs_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = PKWs_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "PKWs je Person") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot6
plot7 = ggplot(data=citties)+
geom_point(aes(x=Immigrants_Mean, y=Value_Mean), size = 2) +
geom_smooth(aes(x=Immigrants_Mean, y=Value_Mean),method='lm') +
geom_label_repel(aes(x = Immigrants_Mean, y = Value_Mean, label = Town)) +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Immigrantenanteil") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot7
plot8 = ggplot(citties, aes(y=Value_Mean, x=Town, fill=Town)) +
geom_bar(position="dodge", stat="identity") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "Radfahrer pro Stunde je Zählstelle"
, fill = "Städte")
plot8
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/thesis_german/Plots")
png(file="plot01.png",width=800, height=800)
plot1
dev.off()
png(file="plot02.png",width=800, height=800)
plot2
dev.off()
png(file="plot03.png",width=800, height=800)
plot3
dev.off()
png(file="plot04.png",width=800, height=800)
plot4
dev.off()
png(file="plot05.png",width=800, height=800)
plot5
dev.off()
png(file="plot06.png",width=800, height=800)
plot6
dev.off()
png(file="plot07.png",width=800, height=800)
plot7
dev.off()
png(file="plot08.png",width=800, height=800)
plot8
dev.off()
rm(list=setdiff(ls(), "BikeData"))
#share of observations per year
years_shares = c(1:nlevels(as.factor(BikeData$Year)))
for(i in 1: nlevels(as.factor(BikeData$Year))){
years_shares[i] = sum(BikeData$Year==levels(as.factor(BikeData$Year))[i])
}
years_shares = as.data.frame(cbind(years_shares,levels(as.factor(BikeData$Year))))
names(years_shares)[1]="Observations"
names(years_shares)[2]="Year"
years_shares$Observations = as.numeric(years_shares$Observations)
years_shares$Observations = years_shares$Observations/sum(years_shares$Observations)*100
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre")
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
#share of observations per city
city_shares = c(1:nlevels(as.factor(BikeData$Town)))
for(i in 1: nlevels(as.factor(BikeData$Town))){
city_shares[i] = sum(BikeData$Town==levels(as.factor(BikeData$Town))[i])
}
city_shares = as.data.frame(cbind(city_shares,levels(as.factor(BikeData$Town))))
names(city_shares)[1]="Observations"
names(city_shares)[2]="Town"
city_shares$Observations = as.numeric(city_shares$Observations)
city_shares$Observations = city_shares$Observations/sum(city_shares$Observations)*100
city_shares2 = city_shares[order(city_shares$Observations,decreasing=TRUE),]
pie(city_shares2$Observations, labels = city_shares2$Town)
plot9 = ggplot(data = city_shares2, aes(x = "", y = -Observations,
fill = reorder(Town, -Observations))) +
geom_bar(stat = "identity", color = "black") +
labs(fill = "Stadt",x="",y="") +
#geom_label_repel(aes(x = "", y = -Observations, label = round(Observations))) +
coord_polar("y") +
theme_void() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot9
png(file="plot09.png",width=800, height=800)
plot9
dev.off()
#share of observations per Inhabitants
city_shares = c(1:4)
city_shares[1]=sum(BikeData$Inhabitants<=100000)
city_shares[2]=sum(BikeData$Inhabitants>100000 & BikeData$Inhabitants<=300000)
city_shares[3]=sum(BikeData$Inhabitants>300000 & BikeData$Inhabitants<=1000000)
city_shares[4]=sum(BikeData$Inhabitants>1000000)
city_shares=as.data.frame(cbind(city_shares,c("1: < 100 Tsd","2: 100 Tsd - 300 Tsd","3: 300 Tsd - 1 Mio","4: > 1 Mio")))
city_shares=as.data.frame(cbind(city_shares,c("A","B","C","D")))
names(city_shares)[1]="Observations"
names(city_shares)[2]="Population"
names(city_shares)[3]="Title"
city_shares$Observations = as.numeric(city_shares$Observations)
city_shares$Observations = city_shares$Observations/sum(city_shares$Observations)*100
plot10 = ggplot(city_shares, aes(y=Observations, x=Title, fill = Population)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "in %"
, fill = "Einwohnerzahl") +
theme(text = element_text(size = 60))
plot10
plot10 = ggplot(city_shares, aes(y=Observations, x=Title, fill = Population)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "in %"
, fill = "Einwohnerzahl") +
theme(text = element_text(size = 30))
plot10
plot10 = ggplot(city_shares, aes(y=Observations, x=Title, fill = Population)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "in %"
, fill = "Einwohnerzahl") +
theme(text = element_text(size = 26))
plot10
png(file="plot10.png",width=800, height=800)
plot10
dev.off()
plot10 = ggplot(city_shares, aes(y=Observations, x=Title, fill = Population)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "in %"
, fill = "Einwohnerzahl") +
theme(text = element_text(size = 22))
plot10
png(file="plot10.png",width=800, height=800)
plot10
dev.off()
plot10 = ggplot(city_shares, aes(y=Observations, x=Title, fill = Population)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(legend.text=element_text(size=12)) +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(y = "in %"
, fill = "Einwohnerzahl") +
theme(text = element_text(size = 20))
plot10
png(file="plot10.png",width=800, height=800)
plot10
dev.off()
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 20))
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 24))
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 30))
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 30))
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 26))
plot28
png(file="plot28.png",width=800, height=800)
plot28
dev.off()
plot28
ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 26))
ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre")
plot28
plot28
plot28 = ggplot(years_shares, aes(y=Observations, x=Year, fill = Year)) +
geom_bar(position="dodge", stat="identity")+
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(legend.text=element_text(size=12)) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
labs(title = "Anteile des Datensatzes nach Jahren"
, y = "in %"
, fill = "Jahre") +
theme(text = element_text(size = 20))
plot28
