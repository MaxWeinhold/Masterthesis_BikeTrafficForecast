test21$Year=2021
test=rbind(test12,test13)
test=rbind(test,test14)
test=rbind(test,test15)
test=rbind(test,test16)
test=rbind(test,test17)
test=rbind(test,test18)
test=rbind(test,test19)
test=rbind(test,test20)
test=rbind(test,test21)
test$X.7 = gsub(" ", "", test$X.7)
test$X.7 = gsub(",", ".", test$X.7)
test$X.7 = as.numeric(test$X.7)
names(test)[9]="Area"
test$X.8 = gsub(" ", "", test$X.8)
test$X.8 = as.numeric(test$X.8)
names(test)[10]="Inhabitants"
test$X.9 = gsub(" ", "", test$X.9)
test$X.9 = as.numeric(test$X.9) / test$Inhabitants
names(test)[11]="Male_Ratio"
#City Longitude and Latidtude
test$X.13 = gsub(" ", "", test$X.13)
test$X.13 = gsub(",", ".", test$X.13)
test$X.13 = as.numeric(test$X.13)
names(test)[15]="City_Lon"
test$X.14 = gsub(" ", "", test$X.14)
test$X.14 = gsub(",", ".", test$X.14)
test$X.14 = as.numeric(test$X.14)
names(test)[16]="City_Lat"
names(test)[18]="Density"
test$number <- NULL
test$X <- NULL
test$X.1 <- NULL
test$X.2 <- NULL
test$X.3 <- NULL
test$X.4 <- NULL
test$X.5 <- NULL
test$X.6 <- NULL
test$X.10 <- NULL
test$X.11 <- NULL
test$X.12 <- NULL
test$X.17 <- NULL
if(Year %in% levels(as.factor(test$Year))){
test = test[(test$Year==Year),]
}else {
p = as.data.frame(c(2012:2030))
names(p)[1]="Year"
p$Year2 = p$Year^2
p$Year3 = p$Year^3
model1 <- lm(log(Inhabitants) ~ Year, data=test)
predict1 <- as.data.frame(predict(model1,p))
predict1$Year = p$Year
names(predict1)[1]="Inhabitants"
predict1$Inhabitants = exp(predict1$Inhabitants)
model2 <- lm(log(Male_Ratio) ~ Year, data=test)
predict2 <- as.data.frame(predict(model2,p))
predict2$Year = p$Year
names(predict2)[1]="Male_Ratio "
predict2$Male_Ratio  = exp(predict2$Male_Ratio )
plot1 = ggplot(data = test,aes(x = Year, y = Inhabitants)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Einwohneranzahl") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict1, aes(x = Year, y = Inhabitants),color = "red", size = 1.5)
plot2 = ggplot(data = test,aes(x = Year, y = Male_Ratio)) +
geom_point(size=1.5)+
labs(title = paste("Prognose zur Stadtentwicklung:",Town),color="Formel:") +
xlab("Jahr") +
ylab("Geschlechterverhältnis") +
theme_bw() +
xlim(2012, 2030) +
geom_line(data = predict2, aes(x = Year, y = Male_Ratio),color = "red", size = 1.5)
test[nrow(test) + 1,] = c(test$Area[10],predict1[predict1$Year == Year, ]$Inhabitants,predict2[predict1$Year == Year, ]$Male_Ratio,test$City_Lon[10],test$City_Lat[10],"dicht besiedelt",Year)
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/thesis_german/Plots")
png(file=paste("Predictions_",Town,"_plot01.png",sep=""),width=800, height=800)
print(plot1)
dev.off()
png(file=paste("Predictions_",Town,"_plot02.png",sep=""),width=800, height=800)
print(plot2)
dev.off()
}
ProjectionData = merge(x = ProjectionData,y = test,
by = c("Year"),
all = FALSE)
ProjectionData$Area = as.numeric(ProjectionData$Area)
ProjectionData$Inhabitants = as.numeric(ProjectionData$Inhabitants)
ProjectionData$Male_Ratio = as.numeric(ProjectionData$Male_Ratio)
ProjectionData$City_Lon = as.numeric(ProjectionData$City_Lon)
ProjectionData$City_Lat = as.numeric(ProjectionData$City_Lat)
summary(ProjectionData)
rm(list=setdiff(ls(), c("mapData","ProjectionData","Variables_you_need","summaryBikeData","Town","Year","Bundesland","StationDots")))
#Variables_you_need
#Load data (source: Destatis)
setwd("D:/STUDIUM/Münster/7. Semester/Masterarbeit Daten/Destatis")
Destatis12 = read.csv(file = "Altersgruppen 2012.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis13 = read.csv(file = "Altersgruppen 2013.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis14 = read.csv(file = "Altersgruppen 2014.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis15 = read.csv(file = "Altersgruppen 2015.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis16 = read.csv(file = "Altersgruppen 2016.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis17 = read.csv(file = "Altersgruppen 2017.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis18 = read.csv(file = "Altersgruppen 2018.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis19 = read.csv(file = "Altersgruppen 2019.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis20 = read.csv(file = "Altersgruppen 2020.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis21 = read.csv(file = "Altersgruppen 2021.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Destatis22 = read.csv(file = "Altersgruppen 2021.csv",sep=";", encoding="ISO-8859-1", skip = 5)
Altersgruppen = rbind(Destatis12,Destatis13)
Altersgruppen = rbind(Altersgruppen,Destatis14)
Altersgruppen = rbind(Altersgruppen,Destatis15)
Altersgruppen = rbind(Altersgruppen,Destatis16)
Altersgruppen = rbind(Altersgruppen,Destatis17)
Altersgruppen = rbind(Altersgruppen,Destatis18)
Altersgruppen = rbind(Altersgruppen,Destatis19)
Altersgruppen = rbind(Altersgruppen,Destatis20)
Altersgruppen = rbind(Altersgruppen,Destatis21)
names(Altersgruppen)
Altersgruppen$X.1 = NULL
Altersgruppen$Timestamp=as.POSIXlt(Altersgruppen$X,format="%d.%m.%Y")
Altersgruppen$Year	= as.numeric(format(as.POSIXlt(Altersgruppen$Timestamp), format = "%Y"))
Altersgruppen$Timestamp = NULL
names(Altersgruppen)[2]="Town"
Altersgruppen$X = NULL
for(i in 1: nrow(Altersgruppen)){
if(Altersgruppen$Town[i] == "Berlin, kreisfreie Stadt"){Altersgruppen$Town[i] = "Berlin"}
else if(Altersgruppen$Town[i] == "Bochum, kreisfreie Stadt"){Altersgruppen$Town[i] = "Bochum"}
else if(Altersgruppen$Town[i] == "Bonn, kreisfreie Stadt"){Altersgruppen$Town[i] = "Bonn"}
else if(Altersgruppen$Town[i] == "Bremen, kreisfreie Stadt"){Altersgruppen$Town[i] = "Bremen"}
else if(Altersgruppen$Town[i] == "Darmstadt, kreisfreie Stadt"){Altersgruppen$Town[i] = "Darmstadt"}
else if(Altersgruppen$Town[i] == "Düsseldorf, kreisfreie Stadt"){Altersgruppen$Town[i] = "Düsseldorf"}
else if(Altersgruppen$Town[i] == "Hamburg, kreisfreie Stadt"){Altersgruppen$Town[i] = "Hamburg"}
else if(Altersgruppen$Town[i] == "Leipzig, kreisfreie Stadt"){Altersgruppen$Town[i] = "Leipzig"}
else if(Altersgruppen$Town[i] == "Mannheim, kreisfreie Stadt"){Altersgruppen$Town[i] = "Mannheim"}
else if(Altersgruppen$Town[i] == "München, kreisfreie Stadt"){Altersgruppen$Town[i] = "München"}
else if(Altersgruppen$Town[i] == "Münster, kreisfreie Stadt"){Altersgruppen$Town[i] = "Münster"}
else if(Altersgruppen$Town[i] == "Oberhausen, kreisfreie Stadt"){Altersgruppen$Town[i] = "Oberhausen"}
else if(Altersgruppen$Town[i] == "Rostock, kreisfreie Stadt"){Altersgruppen$Town[i] = "Rostock"}
else if(Altersgruppen$Town[i] == "Siegen-Wittgenstein, Landkreis"){Altersgruppen$Town[i] = "Siegen"}
else if(Altersgruppen$Town[i] == "Erfurt, kreisfreie Stadt"){Altersgruppen$Town[i] = "Erfurt"}
else if(Altersgruppen$Town[i] == "Tübingen, Landkreis"){Altersgruppen$Town[i] = "Tübingen"}
else if(Altersgruppen$Town[i] == "Dresden, kreisfreie Stadt"){Altersgruppen$Town[i] = "Dresden"}
else{Altersgruppen$Town[i] = NA}
}
Altersgruppen = na.omit(Altersgruppen)
names(Altersgruppen)
Altersgruppen$young18 = (as.numeric(Altersgruppen$unter.3.Jahre) +
as.numeric(Altersgruppen$X3.bis.unter.6.Jahre) +
as.numeric(Altersgruppen$X6.bis.unter.10.Jahre) +
as.numeric(Altersgruppen$X10.bis.unter.15.Jahre) +
as.numeric(Altersgruppen$X15.bis.unter.18.Jahre)
)/as.numeric(Altersgruppen$Insgesamt) * 100
Altersgruppen$young25 = (as.numeric(Altersgruppen$unter.3.Jahre) +
as.numeric(Altersgruppen$X3.bis.unter.6.Jahre) +
as.numeric(Altersgruppen$X6.bis.unter.10.Jahre) +
as.numeric(Altersgruppen$X10.bis.unter.15.Jahre) +
as.numeric(Altersgruppen$X15.bis.unter.18.Jahre) +
as.numeric(Altersgruppen$X18.bis.unter.20.Jahre) +
as.numeric(Altersgruppen$X20.bis.unter.25.Jahre)
)/as.numeric(Altersgruppen$Insgesamt) * 100
Altersgruppen$young30 = (as.numeric(Altersgruppen$unter.3.Jahre) +
as.numeric(Altersgruppen$X3.bis.unter.6.Jahre) +
as.numeric(Altersgruppen$X6.bis.unter.10.Jahre) +
as.numeric(Altersgruppen$X10.bis.unter.15.Jahre) +
as.numeric(Altersgruppen$X15.bis.unter.18.Jahre) +
as.numeric(Altersgruppen$X18.bis.unter.20.Jahre) +
as.numeric(Altersgruppen$X20.bis.unter.25.Jahre) +
as.numeric(Altersgruppen$X25.bis.unter.30.Jahre)
)/as.numeric(Altersgruppen$Insgesamt) * 100
Altersgruppen$older40 = (as.numeric(Altersgruppen$X40.bis.unter.45.Jahre) +
as.numeric(Altersgruppen$X45.bis.unter.50.Jahre) +
as.numeric(Altersgruppen$X50.bis.unter.55.Jahre) +
as.numeric(Altersgruppen$X55.bis.unter.60.Jahre) +
as.numeric(Altersgruppen$X60.bis.unter.65.Jahre) +
as.numeric(Altersgruppen$X65.bis.unter.75.Jahre) +
as.numeric(Altersgruppen$X75.Jahre.und.mehr)
)/as.numeric(Altersgruppen$Insgesamt) * 100
Altersgruppen$older60 = (as.numeric(Altersgruppen$X60.bis.unter.65.Jahre) +
as.numeric(Altersgruppen$X65.bis.unter.75.Jahre) +
as.numeric(Altersgruppen$X75.Jahre.und.mehr)
)/as.numeric(Altersgruppen$Insgesamt) * 100
Altersgruppen$Insgesamt = as.numeric(Altersgruppen$Insgesamt)
Altersgruppen$unter.3.Jahre = NULL
Altersgruppen$X3.bis.unter.6.Jahre = NULL
Altersgruppen$X6.bis.unter.10.Jahre = NULL
Altersgruppen$X10.bis.unter.15.Jahre = NULL
Altersgruppen$X15.bis.unter.18.Jahre = NULL
Altersgruppen$X18.bis.unter.20.Jahre = NULL
Altersgruppen$X20.bis.unter.25.Jahre = NULL
Altersgruppen$X25.bis.unter.30.Jahre = NULL
Altersgruppen$X25.bis.unter.30.Jahre = NULL
Altersgruppen$X30.bis.unter.35.Jahre = NULL
Altersgruppen$X35.bis.unter.40.Jahre = NULL
Altersgruppen$X40.bis.unter.45.Jahre = NULL
Altersgruppen$X45.bis.unter.50.Jahre = NULL
Altersgruppen$X50.bis.unter.55.Jahre = NULL
Altersgruppen$X55.bis.unter.60.Jahre = NULL
Altersgruppen$X60.bis.unter.65.Jahre = NULL
Altersgruppen$X65.bis.unter.75.Jahre = NULL
Altersgruppen$X75.Jahre.und.mehr = NULL
names(Altersgruppen)[2]="InhDestrict"
d = Altersgruppen[which(Altersgruppen$Year==2021),]
d$Year = 2022
Altersgruppen = rbind(Altersgruppen,d)
Altersgruppen = Altersgruppen[(Altersgruppen$Town==Town),]
if(Year %in% levels(as.factor(Altersgruppen$Year))){
Altersgruppen = Altersgruppen[(Altersgruppen$Year==Year),]
}else {
Altersgruppen = Altersgruppen[(Altersgruppen$Year==2022),]
Altersgruppen$Year = Year
}
ProjectionData = merge(x = ProjectionData,y = Altersgruppen,
by = c("Year","Town"),
all = TRUE)
Immigrants = read.csv(file = "Auslaenderstatistik 12 bis 22.csv",sep=";", encoding="ISO-8859-1", skip = 7)
names(Immigrants)
Immigrants$Timestamp=as.POSIXlt(Immigrants$X31.12.2012,format="%d.%m.%Y")
Immigrants$Year	= as.numeric(format(as.POSIXlt(Immigrants$Timestamp), format = "%Y"))
Immigrants$X31.12.2012 = NULL
Immigrants$X01003 = NULL
Immigrants$X8510 = NULL
Immigrants$X8195 = NULL
Immigrants$Timestamp = NULL
names(Immigrants)[1]="Town"
names(Immigrants)[2]="Immigrants"
#foreach(i = 1: nrow(Immigrants))%dopar%{
for(i in 1: nrow(Immigrants)){
if(Immigrants$Town[i] == "Berlin, kreisfreie Stadt"){Immigrants$Town[i] = "Berlin"}
else if(Immigrants$Town[i] == "Bochum, kreisfreie Stadt"){Immigrants$Town[i] = "Bochum"}
else if(Immigrants$Town[i] == "Bonn, kreisfreie Stadt"){Immigrants$Town[i] = "Bonn"}
else if(Immigrants$Town[i] == "Bremen, kreisfreie Stadt"){Immigrants$Town[i] = "Bremen"}
else if(Immigrants$Town[i] == "Darmstadt, kreisfreie Stadt"){Immigrants$Town[i] = "Darmstadt"}
else if(Immigrants$Town[i] == "Düsseldorf, kreisfreie Stadt"){Immigrants$Town[i] = "Düsseldorf"}
else if(Immigrants$Town[i] == "Hamburg, kreisfreie Stadt"){Immigrants$Town[i] = "Hamburg"}
else if(Immigrants$Town[i] == "Leipzig, kreisfreie Stadt"){Immigrants$Town[i] = "Leipzig"}
else if(Immigrants$Town[i] == "Mannheim, kreisfreie Stadt"){Immigrants$Town[i] = "Mannheim"}
else if(Immigrants$Town[i] == "München, kreisfreie Stadt"){Immigrants$Town[i] = "München"}
else if(Immigrants$Town[i] == "Münster, kreisfreie Stadt"){Immigrants$Town[i] = "Münster"}
else if(Immigrants$Town[i] == "Oberhausen, kreisfreie Stadt"){Immigrants$Town[i] = "Oberhausen"}
else if(Immigrants$Town[i] == "Rostock, kreisfreie Stadt"){Immigrants$Town[i] = "Rostock"}
else if(Immigrants$Town[i] == "Siegen-Wittgenstein, Landkreis"){Immigrants$Town[i] = "Siegen"}
else if(Immigrants$Town[i] == "Erfurt, kreisfreie Stadt"){Immigrants$Town[i] = "Erfurt"}
else if(Immigrants$Town[i] == "Tübingen, Landkreis"){Immigrants$Town[i] = "Tübingen"}
else if(Immigrants$Town[i] == "Dresden, kreisfreie Stadt"){Immigrants$Town[i] = "Dresden"}
else{Immigrants$Town[i] = NA}
}
Immigrants = na.omit(Immigrants)
d = Immigrants[which(Immigrants$Year==2021),]
d$Year = 2022
Immigrants = rbind(Immigrants,d)
Immigrants$Immigrants = as.numeric(Immigrants$Immigrants)
if(Year %in% levels(as.factor(Immigrants$Year))){
Immigrants = Immigrants[(Immigrants$Year==Year),]
}else {
Immigrants = Immigrants[(Immigrants$Year==2022),]
Immigrants$Year = Year
}
ProjectionData = merge(x = ProjectionData,y = Immigrants,
by = c("Year","Town"),
all = TRUE)
PKW = read.csv(file = "PKWs12 bis 22.csv",sep=";", encoding="ISO-8859-1", skip = 5)
names(PKW)
PKW$Timestamp=as.POSIXlt(PKW$X,format="%d.%m.%Y")
PKW$Year	= as.numeric(format(as.POSIXlt(PKW$Timestamp), format = "%Y"))
PKW$X = NULL
PKW$Timestamp = NULL
PKW$X.1 = NULL
names(PKW)[1]="Town"
names(PKW)[2]="PKWs"
#foreach (i = 1: nrow(PKW))%dopar%{
for(i in 1: nrow(PKW)){
if(PKW$Town[i] == "Berlin, kreisfreie Stadt"){PKW$Town[i] = "Berlin"}
else if(PKW$Town[i] == "Bochum, kreisfreie Stadt"){PKW$Town[i] = "Bochum"}
else if(PKW$Town[i] == "Bonn, kreisfreie Stadt"){PKW$Town[i] = "Bonn"}
else if(PKW$Town[i] == "Bremen, kreisfreie Stadt"){PKW$Town[i] = "Bremen"}
else if(PKW$Town[i] == "Darmstadt, kreisfreie Stadt"){PKW$Town[i] = "Darmstadt"}
else if(PKW$Town[i] == "Düsseldorf, kreisfreie Stadt"){PKW$Town[i] = "Düsseldorf"}
else if(PKW$Town[i] == "Hamburg, kreisfreie Stadt"){PKW$Town[i] = "Hamburg"}
else if(PKW$Town[i] == "Leipzig, kreisfreie Stadt"){PKW$Town[i] = "Leipzig"}
else if(PKW$Town[i] == "Mannheim, kreisfreie Stadt"){PKW$Town[i] = "Mannheim"}
else if(PKW$Town[i] == "München, kreisfreie Stadt"){PKW$Town[i] = "München"}
else if(PKW$Town[i] == "Münster, kreisfreie Stadt"){PKW$Town[i] = "Münster"}
else if(PKW$Town[i] == "Oberhausen, kreisfreie Stadt"){PKW$Town[i] = "Oberhausen"}
else if(PKW$Town[i] == "Rostock, kreisfreie Stadt"){PKW$Town[i] = "Rostock"}
else if(PKW$Town[i] == "Siegen-Wittgenstein, Landkreis"){PKW$Town[i] = "Siegen"}
else if(PKW$Town[i] == "Erfurt, kreisfreie Stadt"){PKW$Town[i] = "Erfurt"}
else if(PKW$Town[i] == "Tübingen, Landkreis"){PKW$Town[i] = "Tübingen"}
else if(PKW$Town[i] == "Dresden, kreisfreie Stadt"){PKW$Town[i] = "Dresden"}
else{PKW$Town[i] = NA}
}
PKW = na.omit(PKW)
PKW$PKWs=as.numeric(PKW$PKWs)
if(Year %in% levels(as.factor(PKW$Year))){
PKW = PKW[(PKW$Year==Year),]
}else {
PKW = PKW[(PKW$Year==2022),]
PKW$Year = Year
}
ProjectionData = merge(x = ProjectionData,y = PKW,
by = c("Year","Town"),
all = TRUE)
ProjectionData$PKWs = ProjectionData$PKWs/ProjectionData$InhDestrict
summary(ProjectionData)
rm(list=setdiff(ls(), c("mapData","ProjectionData","Variables_you_need","summaryBikeData","Town","Year","Bundesland","StationDots")))
ProjectionData = na.omit(ProjectionData)
ProjectionData = merge(x = ProjectionData,y = mapData,
by = c("Town"),
all = TRUE)
length(names(ProjectionData))
ProjectionData = cbind(ProjectionData,dummy_cols(ProjectionData$stre_type))
ProjectionData = cbind(ProjectionData,dummy_cols(ProjectionData$stre_type_spec))
ProjectionData = cbind(ProjectionData,dummy_cols(ProjectionData$stre_surface))
length(names(ProjectionData))
ProjectionData$.data_footway = 0
ProjectionData$.data_pedestrian = 0
if(is.null(ProjectionData$.data_motorway)){ProjectionData$.data_motorway = 0}
if(is.null(ProjectionData$.data_driveway)){ProjectionData$.data_driveway = 0}
if(is.null(ProjectionData$.data_sidepath)){ProjectionData$.data_sidepath = 0}
if(is.null(ProjectionData$.data_sidewalk)){ProjectionData$.data_sidewalk = 0}
if(is.null(ProjectionData$.data_pebblestone)){ProjectionData$.data_pebblestone = 0}
if(is.null(ProjectionData$.data_trunk_link)){ProjectionData$.data_trunk_link = 0}
ProjectionData$Rain2 = ProjectionData$Rain^2
ProjectionData$Temperature2 = ProjectionData$Temperature^2
ProjectionData$Inhabitants2 = ProjectionData$Inhabitants^2
ProjectionData$ADFC_Index2 = ProjectionData$ADFC_Index^2
ProjectionData$ClosestSchool2 = ProjectionData$ClosestSchool^2
ProjectionData$Schools500mmRadius2 = ProjectionData$Schools500mmRadius^2
ProjectionData$UniBuild2kmRadius2 = ProjectionData$UniBuild2kmRadius2^2
ProjectionData$ClosestUniBuild2 = ProjectionData$ClosestUniBuild^2
ProjectionData$UniBuild500mmRadius2 = ProjectionData$UniBuild500mmRadius^2
ProjectionData$ClosestSchool2 = ProjectionData$ClosestSchool^2
ProjectionData$ClosestClothesShop2 = ProjectionData$ClosestClothesShop^2
ProjectionData$ClothesShop500mmRadius2 = ProjectionData$ClothesShop500mmRadius^2
ProjectionData$ClothesShop2kmRadius2 = DresdProjectionDataenData$ClothesShop2kmRadius^2
ProjectionData$ClosestTrainS2 = ProjectionData$ClosestTrainS^2
ProjectionData$ClosestBridge2 = ProjectionData$ClosestBridge^2
ProjectionData$young302 = ProjectionData$young30^2
ProjectionData$PKWs2 = ProjectionData$PKWs^2
ProjectionData$CorInz2 = ProjectionData$CorInz^2
ProjectionData$stre_dist2 = ProjectionData$stre_dist^2
ProjectionData$stre_density2 = ProjectionData$stre_density^2
ProjectionData$stre_lengths2 = ProjectionData$stre_lengths^2
ProjectionData$stre_lanes2 = ProjectionData$stre_lanes^2
ProjectionData$stre_maxspeed2 = ProjectionData$stre_maxspeed^2
ProjectionData$os_way_to_city2 = ProjectionData$os_way_to_city^2
ProjectionData$cluster_way_to_city2 = ProjectionData$cluster_way_to_city^2
ProjectionData$Rain3 = ProjectionData$Rain^3
ProjectionData$Inhabitants3 = ProjectionData$Inhabitants^3
ProjectionData$UniBuild500mmRadius3 = ProjectionData$UniBuild500mmRadius^3
ProjectionData$ClothesShop500mmRadius3 = ProjectionData$ClothesShop500mmRadius^3
ProjectionData$ClosestTrainS3 = ProjectionData$ClosestTrainS^3
ProjectionData$ClosestBridge3 = ProjectionData$ClosestBridge3
ProjectionData$stre_lengths3 = ProjectionData$stre_lengths^3
ProjectionData$stre_lanes3 = ProjectionData$stre_lanes^3
ProjectionData$stre_maxspeed3 = ProjectionData$stre_maxspeed^3
ProjectionData$os_way_to_city3 = ProjectionData$os_way_to_city^3
ProjectionData$cluster_way_to_city3 = ProjectionData$cluster_way_to_city^3
ProjectionData$SignalsRatio = ProjectionData$UnmCross250mmRadius/(ProjectionData$UnmCross250mmRadius + ProjectionData$Signals250mmRadius + 1)
if(is.null(ProjectionData$stre_lengths2)){ProjectionData$stre_lengths2 = ProjectionData$stre_lengths^2}
if(is.null(ProjectionData$ClosestSchool2)){ProjectionData$ClosestSchool2 = ProjectionData$ClosestSchool^2}
if(is.null(ProjectionData$ClosestUniBuild2)){ProjectionData$ClosestUniBuild2 = ProjectionData$ClosestUniBuild^2}
if(is.null(ProjectionData$ClosestClothesShop2)){ProjectionData$ClosestClothesShop2 = ProjectionData$ClosestClothesShop^2}
if(is.null(ProjectionData$stre_lanes2)){ProjectionData$stre_lanes2 = ProjectionData$stre_lanes^2}
if(is.null(ProjectionData$stre_maxspeed2)){ProjectionData$stre_maxspeed2 = ProjectionData$stre_maxspeed^2}
if(is.null(ProjectionData$stre_lengths3)){ProjectionData$stre_lengths3 = ProjectionData$stre_lengths^3}
if(is.null(ProjectionData$stre_lanes3)){ProjectionData$stre_lanes3 = ProjectionData$stre_lanes^3}
if(is.null(ProjectionData$stre_maxspeed3)){ProjectionData$stre_maxspeed3 = ProjectionData$stre_maxspeed^3}
if(is.null(ProjectionData$stre_lanes2)){ProjectionData$stre_lanes2 = ProjectionData$stre_lanes^2}
names(ProjectionData)
#calculate Values --------------------------------------------------------------
setwd("D:/STUDIUM/Münster/7. Semester")
load("Modell3_RF_newDataset3.rdata")
summary(model)
library(randomForest)
#projection_pred <- model %>% predict(ProjectionData, type='response')
projection_pred <- predict(model, newdata = ProjectionData, type='response')
summary(as.numeric(projection_pred))
summary(exp(as.numeric(projection_pred)))
ProjectionData$Value = exp(as.numeric(projection_pred))
summary(ProjectionData$Value)
nrow(ProjectionData)
#Create Map
#bounding box for our map
myLocation <- c(13.711855297008274,51.03555566091716, 13.787939108894271,51.064814222798276) #Dresden
#myLocation <- c(12.354394062873975, 51.32818719589893, 12.400956572541,51.35298495927908) #Leipzig
#myLocation <- c(6.808134941665549, 51.4642336514862, 6.897937268789374, 51.50006589136935) #Oberhausen2
#myLocation <- c(9.948052762410784, 53.539459805323816, 10.026187913111105, 53.568930771301424)#Hamburg Innenstadt + Altona
#myLocation <- c(8.45440628005673,49.47735485105553,   8.497814937261264,49.49986824573402) # Mannheim Innensatdt
#myLocation <- c(9.968615748457593,53.539830498755265,   10.012409572679795,53.55974898224376) # Hamburg Innensatdt
#myLocation <- c(6.833644830296469,51.460877236637465,  6.874634203344688,51.48078438095241) # Oberhausen Innensatdt
#myLocation <- c(7.547877265931465,51.911200682602676,   7.689021424551272,52.0041202032665) # Muenster
#myLocation <- c(7.597514856738869,51.94573812395569,   7.652382675482133,51.9756143280805) # Muenster Ring
#myLocation <- c(7.613588137509167,51.955501852036285,   7.638086559861329,51.96820564471896) # Muenster Innenstadt
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=13)
#write.csv(ProjectionData,"Mannheim_Innenstadt_Oststadt.csv")
if(StationDots==TRUE){
setwd("D:/STUDIUM/Münster/7. Semester/Masterarbeit Daten")
#Load Data Set
#BikeData = read.csv(file = "completeDataSet_1.csv",sep=",", encoding="ISO-8859-1")
BikeData = read.csv(file = "Dresden_Daten_Komplett.csv",sep=",", encoding="ISO-8859-1")
names(BikeData)
#BikeData = BikeData[BikeData$Town==Town,] #Bei Dresden auskommandieren
BikeData2 = cbind(BikeData$Lat,BikeData$Lon)
BikeData2 = as.data.frame(cbind(BikeData2,BikeData$Value))
names(BikeData2)[1]= "Lat"
names(BikeData2)[2]= "Lon"
names(BikeData2)[3]= "Value"
rm(BikeData)
library(plyr)
BikeData2=ddply(BikeData2,.(Lon,Lat),summarize,Value=mean(Value))
}
BikeData
for(i in 1:nlevels(as.factor(ProjectionData$Months))){
for(j in 1:nlevels(as.factor(ProjectionData$Day))){
for(k in 1:nlevels(as.factor(ProjectionData$Hour))){
streetPositions = ProjectionData[ProjectionData$Months==levels(as.factor(ProjectionData$Months))[i],]
streetPositions = streetPositions[streetPositions$Day==levels(as.factor(ProjectionData$Day))[j],]
streetPositions = streetPositions[streetPositions$Hour==levels(as.factor(ProjectionData$Hour))[k],]
nrow(streetPositions)
names(streetPositions)
streetPositions$Value
streetPositions <- streetPositions[, !duplicated(colnames(streetPositions))]
map_plot = ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))     +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file=paste("map",ProjectionData$Town[1],"plot_RF_Ring_",i,"_",j,"_",k,".png",sep=""),width=1200, height=1200)
print(map_plot)
dev.off()
#summary(streetPositions)
}
}
}
rm(map_plot)
beep("mario")
summary(streetPositions)
summary(streetPositions$Value)
streetPositions$Lon
streetPositions$Lon2
streetPositions$Lat
streetPositions$Lat2
map_plot = ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round")
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round")
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4)
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep=""))
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow"))
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw()
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20))
ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
map_plot = ggmap(mad_map) + geom_segment(data = streetPositions, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value), size = 1.2, alpha = 1, lineend = "round") +
geom_point(data = BikeData2, aes(x =Lon, y= Lat, color = Value), shape = 21, fill = "white", size = 7, stroke = 4) +
ggtitle(paste("Fahradfahrer am ", streetPositions$Day[1],".", streetPositions$Months[1],".", streetPositions$Year[1],
" um ",streetPositions$Hour[1], " Uhr in: ",streetPositions$Town[1],"\n", "Temp: ",
streetPositions$Temperature[1]," C° , Regen: ", streetPositions$Rain[1], " mm, Wochenende: ",
streetPositions$Weekend[1], sep="")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Fahrer summiert")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file=paste("map",ProjectionData$Town[1],"plot_RF_Ring_",i,"_",j,"_",k,".png",sep=""),width=1200, height=1200)
print(map_plot)
dev.off()
