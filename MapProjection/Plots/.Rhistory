else if(PKW$Town[i] == "Düsseldorf, kreisfreie Stadt"){PKW$Town[i] = "Düsseldorf"}
else if(PKW$Town[i] == "Hamburg, kreisfreie Stadt"){PKW$Town[i] = "Hamburg"}
else if(PKW$Town[i] == "Leipzig, kreisfreie Stadt"){PKW$Town[i] = "Leipzig"}
else if(PKW$Town[i] == "Mannheim, kreisfreie Stadt"){PKW$Town[i] = "Mannheim"}
else if(PKW$Town[i] == "München, kreisfreie Stadt"){PKW$Town[i] = "München"}
else if(PKW$Town[i] == "Münster, kreisfreie Stadt"){PKW$Town[i] = "Münster"}
else if(PKW$Town[i] == "Oberhausen, kreisfreie Stadt"){PKW$Town[i] = "Oberhausen"}
else if(PKW$Town[i] == "Rostock, kreisfreie Stadt"){PKW$Town[i] = "Rostock"}
else if(PKW$Town[i] == "Siegen-Wittgenstein, Landkreis"){PKW$Town[i] = "Siegen"}
else if(PKW$Town[i] == "Erfurt, kreisfreie Stadt"){PKW$Town[i] = "Erfurt"}
else if(PKW$Town[i] == "Tübingen, Landkreis"){PKW$Town[i] = "Tübingen"}
else if(PKW$Town[i] == "Dresden, kreisfreie Stadt"){PKW$Town[i] = "Dresden"}
else{PKW$Town[i] = NA}
}
PKW = na.omit(PKW)
PKW$PKWs=as.numeric(PKW$PKWs)
if(Year %in% levels(as.factor(PKW$Year))){
PKW = PKW[(PKW$Year==Year),]
}else {
PKW = PKW[(PKW$Year==2022),]
PKW$Year = Year
}
ProjectionData = merge(x = ProjectionData,y = PKW,
by = c("Year","Town"),
all = TRUE)
ProjectionData$PKWs = ProjectionData$PKWs/ProjectionData$InhDestrict
summary(ProjectionData)
rm(list=setdiff(ls(), c("mapData","ProjectionData","Variables_you_need","summaryBikeData","Town","Year","Bundesland","StationDots")))
ProjectionData = na.omit(ProjectionData)
ProjectionData = merge(x = ProjectionData,y = mapData,
by = c("Town"),
all = TRUE)
ProjectionData$.data_footway = 0
ProjectionData$.data_pedestrian = 0
if(is.null(ProjectionData$.data_motorway)){ProjectionData$.data_motorway = 0}
if(is.null(ProjectionData$.data_driveway)){ProjectionData$.data_driveway = 0}
if(is.null(ProjectionData$.data_sidepath)){ProjectionData$.data_sidepath = 0}
if(is.null(ProjectionData$.data_sidewalk)){ProjectionData$.data_sidewalk = 0}
if(is.null(ProjectionData$.data_pebblestone)){ProjectionData$.data_pebblestone = 0}
if(is.null(ProjectionData$.data_trunk_link)){ProjectionData$.data_trunk_link = 0}
if(is.null(ProjectionData$stre_lengths2)){ProjectionData$stre_lengths2 = ProjectionData$stre_lengths^2}
if(is.null(ProjectionData$ClosestSchool2)){ProjectionData$ClosestSchool2 = ProjectionData$ClosestSchool^2}
if(is.null(ProjectionData$ClosestUniBuild2)){ProjectionData$ClosestUniBuild2 = ProjectionData$ClosestUniBuild^2}
if(is.null(ProjectionData$ClosestClothesShop2)){ProjectionData$ClosestClothesShop2 = ProjectionData$ClosestClothesShop^2}
if(is.null(ProjectionData$stre_lanes2)){ProjectionData$stre_lanes2 = ProjectionData$stre_lanes^2}
if(is.null(ProjectionData$stre_maxspeed2)){ProjectionData$stre_maxspeed2 = ProjectionData$stre_maxspeed^2}
if(is.null(ProjectionData$stre_lengths3)){ProjectionData$stre_lengths3 = ProjectionData$stre_lengths^3}
if(is.null(ProjectionData$stre_lanes3)){ProjectionData$stre_lanes3 = ProjectionData$stre_lanes^3}
if(is.null(ProjectionData$stre_maxspeed3)){ProjectionData$stre_maxspeed3 = ProjectionData$stre_maxspeed^3}
if(is.null(ProjectionData$stre_lanes2)){ProjectionData$stre_lanes2 = ProjectionData$stre_lanes^2}
#calculate Values --------------------------------------------------------------
setwd("D:/STUDIUM/Münster/7. Semester")
load("Modell3_RF_newDataset3.rdata")
summary(model)
library(randomForest)
#projection_pred <- model %>% predict(ProjectionData, type='response')
projection_pred <- predict(model, newdata = ProjectionData, type='response')
summary(as.numeric(projection_pred))
summary(exp(as.numeric(projection_pred)))
ProjectionData$Value = exp(as.numeric(projection_pred))
summary(ProjectionData$Value)
nrow(ProjectionData)
#Create Map
ProjectionData
summary(ProjectionData$Value)
summary(ProjectionData$Accidents)
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Accidents, y=Value), size = 2) +
geom_smooth(aes(x=Accidents, y=Value),method='lm') +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Anteil der Bevölker unter 30 Jahre") +
scale_x_continuous(labels = comma) +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Accidents, y=Value), size = 2) +
geom_smooth(aes(x=Accidents, y=Value),method='lm') +
labs(y = "Radfahrer pro Stunde je Stadt"
, x = "Anteil der Bevölker unter 30 Jahre") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm') +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 1) +
geom_smooth(aes(x=Value, y=Accidents),method='lm') +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.5) +
geom_smooth(aes(x=Value, y=Accidents),method='lm') +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm') +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
summary(normalized)
normalized = (ProjectionData$Accidents-0.5*min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
summary(normalized)
normalized = (((ProjectionData$Accidents-min(ProjectionData$Accidents))/2) + ((max(ProjectionData$Accidents)-min(ProjectionData$Accidents))/2))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
summary(normalized)
map_corr = ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1200, height=1200)
print(map_corr)
dev.off()
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle")
myLocation <- c(7.597514856738869,51.94573812395569,   7.652382675482133,51.9756143280805) # Muenster Ringhttp://127.0.0.1:46409/graphics/912ff922-e076-4774-aa9c-43dc7e934c8f.png
mad_map <- get_stamenmap(bbox=myLocation, maptype="terrain-background", zoom=15)
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents), size = 1.4, lineend = "round")
ProjectionData$normalized
#normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ProjectionData$normalized = (((ProjectionData$Accidents-min(ProjectionData$Accidents))/2) + ((max(ProjectionData$Accidents)-min(ProjectionData$Accidents))/2))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ProjectionData$normalized
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = Value), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
summary(ProjectionData$Accidents)
#normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ProjectionData$normalized = (((ProjectionData$Accidents-min(ProjectionData$Accidents))/2) + ((max(ProjectionData$Accidents)-min(ProjectionData$Accidents))/2))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, size = Value), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, size = Value), lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
ProjectionData$Value
cor(ProjectionData$Accidents, ProjectionData$Value, method = c("pearson", "kendall", "spearman"))
cor.test(ProjectionData$Accidents, ProjectionData$Value, method=c("pearson", "kendall", "spearman"))
ProjectionData$normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
cor(ProjectionData$Value, ProjectionData$Accidents, method = c("pearson", "kendall", "spearman"))
cor.test(ProjectionData$Value, ProjectionData$Accidents, method=c("pearson", "kendall", "spearman"))
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = normalized, alpha = Accidents), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfälle skaliert")
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = Accidents), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
map_corr = ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle", alpha = "Traffic")
png(file="Korrelationskarte_Münster.png",width=1200, height=1200)
print(map_corr)
dev.off()
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
Value
summary(ProjectionData$Value)
ggmap(mad_map) +
geom_segment(data = ProjectionData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 1.4, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
Value
summary(ProjectionData$Value)
map_corr = ggmap(mad_map) +
geom_segment(data = ProjectionData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 2, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
map_corr
png(file="Korrelationskarte_Münster.png",width=1200, height=1200)
print(map_corr)
dev.off()
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"))
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 20))
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 26))
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
#theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 26))
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationskarte_Münster.png",width=1000, height=1000)
print(plot_corr)
dev.off()
cor(ProjectionData$Value, ProjectionData$Accidents, method = c("pearson", "kendall", "spearman"))
cor.test(ProjectionData$Value, ProjectionData$Accidents, method=c("pearson", "kendall", "spearman"))
library("ggpubr")
library("ggpubr")
# mpg
ggqqplot(ProjectionData$Value, ylab = "Value")
# wt
ggqqplot(ProjectionData$Accidents, ylab = "Accidents")
# mpg
ggqqplot(ProjectionData$Value, ylab = "Value")
# wt
ggqqplot(ProjectionData$Accidents, ylab = "Accidents")
plot_corr = ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
#theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 26))
setwd("C:/Users/MaxWe/Documents/GitHub/Masterthesis_BikeTrafficForecast/MapProjection/Plots")
png(file="Korrelationsgraf.png",width=1000, height=1000)
print(plot_corr)
dev.off()
summary(ProjectionData$Accidents)
ProjectionData$normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ProjectionData$normalized = (((ProjectionData$Accidents-min(ProjectionData$Accidents))/2) + ((max(ProjectionData$Accidents)-min(ProjectionData$Accidents))/2))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
#summary(normalized)
map_corr = ggmap(mad_map) +
geom_segment(data = ProjectionData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 2, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
png(file="Korrelationskarte_Münster.png",width=1200, height=1200)
print(map_corr)
dev.off()
ProjectionData$Value2 = ProjectionData$Value^2
ProjectionData$Value3 = ProjectionData$Value^3
# Create an ols regression model
model1 <- lm(Accidents ~ Value + Value2 + Value3, data=ProjectionData)
predict1 <- as.data.frame(predict(model1,ProjectionData))
predict1$Value = ProjectionData$Value
names(predict1)[1]="Accidents"
plot25 = ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw() +
geom_line(data = predict1, aes(x = Value, y = Accidents, color='OLS'), size = 1.5) +
#geom_line(data = predict2, aes(x = Value, y = Accidents, color='SVR'), size = 1.5)
plot25
ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw() +
geom_line(data = predict1, aes(x = Value, y = Accidents, color='OLS'), size = 1.5)
plot25
ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw() +
geom_line(data = predict1, aes(x = Value, y = Accidents, color='OLS'), size = 1.5)
ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw() +
geom_line(data = predict1, aes(x = Value, y = Accidents, color='OLS'), size = 1.5)
plot25 = ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw() +
geom_line(data = predict1, aes(x = Value, y = Accidents, color='OLS'), size = 1.5)
plot25
ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size=1.5)+
labs(title = "Vergleich zwischen OLS und Support Vector Regression"
, color = "Methode") +
ggtitle("Vergleich zwischen OLS und Support Vector Regression") +
xlab("Uhrzeit") +
ylab("Fahrradauufkommen") +
theme_bw()
ggplot(ProjectionData,aes(x = Value, y = Accidents)) +
geom_point(size = 2, alpha = 0.2)
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
#theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 26))
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2)
plot25
summary(ProjectionData$Accidents)
ProjectionData$normalized = (ProjectionData$Accidents-min(ProjectionData$Accidents))/(max(ProjectionData$Accidents)-min(ProjectionData$Accidents))
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2)
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2)
ggmap(mad_map) +
geom_segment(data = ProjectionData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 2, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
ggplot(data=ProjectionData)+
geom_point(aes(x=Value, y=Accidents), size = 2, alpha = 0.2) +
geom_smooth(aes(x=Value, y=Accidents),method='lm', size = 2) +
labs(y = "Unfälle"
, x = "Anzahl der passierenden Radfahrer") +
theme_bw() +
#theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold")) +
theme(text = element_text(size = 26))
map_corr = ggmap(mad_map) +
geom_segment(data = ProjectionData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Value, alpha = normalized), size = 2, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(ProjectionData$Value)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Radfahrer", alpha = "Unfallsdichte")
png(file="Korrelationskarte_Münster.png",width=1200, height=1200)
print(map_corr)
dev.off()
ggmap(mad_map) +
geom_segment(data = mapData, aes(x = Lon, y = Lat, xend = Lon2, yend = Lat2, color = Accidents), size = 1.4, alpha = 1, lineend = "round") +
ggtitle(paste("Fahrradunfälle in 32 Meter Nähe")) +
scale_colour_gradientn(limits = c(0, max(mapData$Accidents)), space = "Lab",
colours = c("black","darkblue","blue","violet","red","orange", "yellow")) +
theme_bw() +
theme(text = element_text(size = 20)) +
labs(y = "Längengrad", x = "Breitengrad", color ="Unfälle")
ProjectionData
summary(ProjectionData$Value)
summary(ProjectionData$Accidents)
